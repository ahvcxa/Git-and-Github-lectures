1. Git'i bir save noktası gibi düşünebilirsin. Farklı dallara (branch) ayırıp tekrar birleştirebilirsin.

2. "git  init" ve "git status" kavramlarını gördüm ve ayrıcı "ls -la" komutunu girince gizli klasörleride gösteriyor.

3. "git add ." ve "git add (file name)" komutları ile ekleme yapmayı ve ayrıca " git commit -m "mesaj" " ile de commit atmayı öğrendim.

4. "git log" yazıp commit numaralarını ve mesajlarını görebiliyorum.

5. Kişisel bilgiler ve keyleri bunun içinde saklayabilir ve paylaşmadan gitignore klasörünün içinde gizleyebilirim.
   Yalnızca isim yazmam gerek . gitignore dosyasının içine. oluşturmak için "touch .gitignore".

6. HEAD kavramı güncel olarak neredeyiz onu gösteriyor bunun üzerinde durduk.

7. "git branch feature" adında yeni bir branch açtık. onun üzerinde yapılan değişiklikler master branchte gözükmeyecek ve aynı şekilde 
   diğerinde de  daha sonra "git branch" diyip hangi branchler var ona bakabilirsin. daha sonra "git switch feature" diyip feature branchine geçip
   ilerleyebilirsin daha sonra bu iki branchi birleştirmek için "git merge feature" hangisini içeri alacaksak onu komuta yazmamız gerekiyor.Yani önce 
   master branchine geçmemiz gerekli.
8. Eger farklı bir branch de çalışıp master dalında bir  şey yapmadan merge etmek isterseniz  bu ifade fast foward denir.

9. Eğer aynı dosya içinde farklı branchlar da değişiklik yaparsan conflict olur bunu düzeltmek için birini silmen ona göre karmaşıklığı gidermen gerek. 

10. Eğer bir branchin içindeyken bir değişikliği tamamlamadıysan ve başka bir branchin içine geçerken sıkıntı çıkmasın ve ayrıca commit etmeyeyim diyorsan
    "git stash" komutu ile farklı bir depoya yollayabilirsin.
    geri çağırırken ise "git stash pop" komutunu kullanıyoruz.
    Eğer birden fazla stash yaparsak "git stash list" yazarak listeden ilk satırını kopyalayıp "git stash apply stash@{0}" gibi.
